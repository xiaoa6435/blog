#| standalone: true
#| viewerHeight: 820

from shiny import App, render, ui
import scipy
import math
import pandas as pd
import numpy as np
from scipy.stats import norm
from plotnine import *

app_ui = ui.page_fluid(
    ui.row(
        ui.column(2, ""),
        ui.column(3, ui.tooltip("样本数", "count(1), 避免count(distinct distinct_id)")),
        ui.column(3, ui.tooltip("均值", "avg(coalesce(y, 0.0))")),
        ui.column(3, ui.tooltip("方差", "var_samp(coalesce(y, 0.0))")),
    ),
    ui.row(
        ui.column(2, "对照组"), 
        ui.column(3, ui.input_numeric("n0", label=None, value=1023, step=1)),
        ui.column(3, ui.input_numeric("m0", label=None, value=0.61, step=0.1)),
        ui.column(3, ui.input_numeric("var0", label=None, value=None, step=0.01)),
    ),
    ui.row(
        ui.column(2, "实验组"),
        ui.column(3, ui.input_numeric("n1", label=None, value=1000)),
        ui.column(3, ui.input_numeric("m1", label=None, value=0.63)),
        ui.column(3, ui.input_numeric("var1", label=None, value=None)),
    ),
    ui.row(
        ui.column(
            6,
            ui.input_radio_buttons(
                "alternative", 
                "alternative", 
                {"greater": "greater", "less":"less", "two.sided": "two.sided"},
                inline=True
            ),
        ),
        ui.column(5, ui.input_numeric("conf_level", label="置信水平", value=0.95))
    ),
    ui.output_plot("density"),
    ui.output_text_verbatim("res")
)

def server(input, output, session):

    # @reactive.effect
    # @reactive.event(input.m0)
    # def _():
    #     if input.m0() > 0.0 and input.m0() < 1.0:
    #       mp = input.m0()
    #       ui.update_numeric("var", value=mp * (1.0 - mp))

    @render.plot
    def density():
        
        if input.var0() is None or input.var1() is None:
            (g0, n0, m0, var0) = ("对照组", input.n0(), input.m0(), input.m0() * (1 - input.m0()))
            (g1, n1, m1, var1) = ("实验组", input.n1(), input.m1(), input.m1() * (1 - input.m1()))
            p = (n0 * m0 + n1 * m1) / (n0 + n1)
            stderr = math.sqrt(p * (1.0 - p) * (1 / n0 + 1 / n1))
        else:
            (g0, n0, m0, var0) = ("对照组", input.n0(), input.m0(), input.var0())
            (g1, n1, m1, var1) = ("实验组", input.n1(), input.m1(), input.var1())
            stderr = math.sqrt(var0 / n0 + var1 / n1)
        delta = m1 - m0
        # (g0, n0, m0, var0) = ("对照组", input.n0(), input.m0(), input.var0())
        # (g1, n1, m1, var1) = ("实验组", input.n1(), input.m1(), input.var1())
        # stderr = math.sqrt(var0 / n0 + var1 / n1)
        xlim = [m0, m1] if m0 < m1 else [m1, m0]
        xlim[0] = xlim[0] - math.sqrt(var0 / n0) * 3
        xlim[1] = xlim[1] + math.sqrt(var1 / n1) * 3
        ctw = 1 - norm.cdf(0, delta, stderr)
        fig = (
            ggplot(pd.DataFrame({"x": xlim}), aes(x="x")) + 
                stat_function(fun=lambda x: norm.pdf(x, m0, math.sqrt(var0 / n0)), color='blue') +
                stat_function(fun=lambda x: norm.pdf(x, m1, math.sqrt(var1 / n1)), color='green') +
                labs(x="", y="")
        )
        return fig

    @render.text
    def res():
        if input.var0() is None or input.var1() is None:
            (g0, n0, m0, var0) = ("对照组", input.n0(), input.m0(), input.m0() * (1 - input.m0()))
            (g1, n1, m1, var1) = ("实验组", input.n1(), input.m1(), input.m1() * (1 - input.m1()))
        else:
            (g0, n0, m0, var0) = ("对照组", input.n0(), input.m0(), input.var0())
            (g1, n1, m1, var1) = ("实验组", input.n1(), input.m1(), input.var1())

        # (g0, n0, m0, var0) = ("对照组", input.n0(), input.m0(), input.var0())
        # (g1, n1, m1, var1) = ("实验组", input.n1(), input.m1(), input.var1())

        conf_level = input.conf_level()
        alternative = input.alternative().strip()

            
        delta = m1 - m0
        stderr = math.sqrt(var0 / n0 + var1 / n1)

        if input.var0() is None or input.var1() is None:
            suff = [[n0, m0, var0], [n1, m1, var1]]
            rep_cnt = 100000
            rng_samples = []
            for isuff in suff:
                (n, p, var) = isuff
                alpha = int(np.round(n * p))
                beta = n - alpha
                rng_samples.append(np.random.beta(alpha, beta, rep_cnt))
            prob = np.bincount(np.vstack(rng_samples).argmax(axis=0)) / rep_cnt
            ctw = 1 - prob[0]
        else:
            ctw = 1 - norm.cdf(0, delta, stderr)

        if alternative == "two.sided":
            p = norm.cdf(-abs(delta / stderr)) * 2
            alternative_s = "备择假设：实验组和对照组的均值有差异"
            lower = delta - norm.ppf((0.5 - conf_level / 2)) * stderr
            upper = delta + norm.ppf((0.5 + conf_level / 2)) * stderr
        elif alternative == "greater":
            alternative_s = "备择假设：实验组均值大于对照组的均值"
            p = 1.0 - norm.cdf(delta / stderr)
            lower = delta - norm.ppf(conf_level) * stderr
            upper = float("inf")
        else:
            alternative_s = "备择假设：实验组均值小于对照组的均值"
            p = norm.cdf(delta / stderr)
            lower = float("-inf")
            upper = delta + norm.ppf(conf_level) * stderr

        # ctw = 1 - norm.cdf(0, delta, stderr)
        p_ci = f"""
        {alternative_s}
        delta = m1 - m0: {delta:.3f},
        实验组胜出概率: {ctw:.3f}
        p值: {p:.3f}
        {(conf_level * 100)}% CI: {lower:.3f} ~ {upper:.3f}
        """

        return p_ci

    # @reactive.Effect
    # def _():
    #     if input.m0() > 0.0 and input.m0() < 1.0:
    #       p = input.m0()
    #       ui.update_numeric("var0", value=p * (1.0 - p))

app = App(app_ui, server)
